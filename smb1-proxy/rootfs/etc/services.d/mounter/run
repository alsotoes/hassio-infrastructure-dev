#!/usr/bin/with-contenv bashio
set -euo pipefail

TC_HOST="$(bashio::config 'tc_host')"
TC_SHARE="$(bashio::config 'tc_share')"
TC_USER="$(bashio::config 'tc_username')"
TC_PASS="$(bashio::config 'tc_password')"
TC_DOMAIN="$(bashio::config 'tc_domain')"
MOUNT_POINT="$(bashio::config 'mount_point')"
ALLOW_NTLMV1="$(bashio::config 'allow_ntlmv1')"
ALLOW_SMB1="$(bashio::config 'allow_smb1')"
EXPOSE_IN_SHARE="$(bashio::config 'expose_in_share')"
SHARE_LINK_NAME="$(bashio::config 'share_link_name')"

for dir in "${MOUNT_POINT}" /data/smbnet /share; do
  mkdir -p "$dir" >/dev/null 2>&1 || true
done

# Cleanup function for graceful shutdown
cleanup() {
    bashio::log.info "Shutting down mounter service..."
    if mountpoint -q /data/smbnet 2>/dev/null; then
        bashio::log.info "Unmounting smbnetfs..."
        fusermount -u /data/smbnet 2>/dev/null || umount -f /data/smbnet 2>/dev/null || true
    fi
    exit 0
}

# Setup signal handlers for graceful shutdown
trap cleanup SIGTERM SIGINT SIGQUIT

# Function to mount smbnetfs
mount_smbnetfs() {
    bashio::log.info "Mounting via FUSE smbnetfs..."
    bashio::log.info "Config: TC_HOST=${TC_HOST}, TC_SHARE=${TC_SHARE}, MOUNT_POINT=${MOUNT_POINT}"
    
    # Cleanup any existing mount
    if mountpoint -q /data/smbnet 2>/dev/null; then
        bashio::log.info "Cleaning up existing smbnetfs mount..."
        fusermount -u /data/smbnet 2>/dev/null || umount -f /data/smbnet 2>/dev/null || true
        sleep 2
    fi
    
    # Kill any existing smbnetfs processes
    pkill -f smbnetfs 2>/dev/null || true
    sleep 1
    
    # Start smbnetfs with more verbose logging
    bashio::log.info "Starting smbnetfs..."
    if ! smbnetfs /data/smbnet -o allow_other,nonempty,debug=1; then
        bashio::log.error "smbnetfs failed to start"
        return 1
    fi
    
    # Wait longer for smbnetfs to initialize
    sleep 5
    
    # Check what's available in smbnetfs
    bashio::log.info "Checking smbnetfs mount contents..."
    if ! ls -la /data/smbnet/ 2>/dev/null; then
        bashio::log.error "Cannot list /data/smbnet/ - smbnetfs may not be working"
        return 1
    fi
    
    # Try different hostname variations
    TARGET=""
    for host_variant in "${TC_HOST}" "$(echo "${TC_HOST}" | tr '[:lower:]' '[:upper:]')" "$(getent hosts "${TC_HOST}" 2>/dev/null | awk '{print $1}' | head -1)"; do
        [ -z "$host_variant" ] && continue
        bashio::log.info "Trying host variant: '${host_variant}'"
        
        if [ -d "/data/smbnet/${host_variant}" ]; then
            bashio::log.info "Found host directory: ${host_variant}"
            bashio::log.info "Available shares in ${host_variant}:"
            ls -la "/data/smbnet/${host_variant}/" 2>/dev/null || bashio::log.warning "Cannot list shares"
            
            if [ -d "/data/smbnet/${host_variant}/${TC_SHARE}" ]; then
                TARGET="/data/smbnet/${host_variant}/${TC_SHARE}"
                bashio::log.info "Found target share: ${TARGET}"
                break
            else
                bashio::log.warning "Share '${TC_SHARE}' not found in ${host_variant}"
            fi
        else
            bashio::log.warning "Host directory not found: ${host_variant}"
        fi
    done

    if [ -z "$TARGET" ]; then
        bashio::log.error "Could not locate share '${TC_SHARE}' on host '${TC_HOST}'"
        bashio::log.info "Available hosts in smbnetfs:"
        ls -la /data/smbnet/ 2>/dev/null || bashio::log.error "smbnetfs mount is empty or inaccessible"
        return 1
    fi

    # Test access to the target
    bashio::log.info "Testing access to ${TARGET}..."
    if ! timeout 15 ls "${TARGET}" >/dev/null 2>&1; then
        bashio::log.error "Cannot access target share ${TARGET} - authentication or network issue"
        return 1
    fi

    # Create symlink
    rm -rf "${MOUNT_POINT}" 2>/dev/null || true
    if ! ln -s "${TARGET}" "${MOUNT_POINT}"; then
        bashio::log.error "Failed to create symlink ${MOUNT_POINT} -> ${TARGET}"
        return 1
    fi
    
    bashio::log.info "FUSE smbnetfs mounted successfully: ${MOUNT_POINT} -> ${TARGET}"
    
    # Expose under /share for other add-ons / file access
    if [ "${EXPOSE_IN_SHARE}" = "true" ]; then
        mkdir -p /share >/dev/null 2>&1 || true
        LINK="/share/${SHARE_LINK_NAME}"
        rm -rf "${LINK}" 2>/dev/null || true
        if ln -s "${MOUNT_POINT}" "${LINK}"; then
            bashio::log.info "Exposed ${MOUNT_POINT} at ${LINK}"
        else
            bashio::log.warning "Failed to create share link ${LINK}"
        fi
    fi
    
    return 0
}

# Initial mount
if ! mount_smbnetfs; then
    bashio::log.error "Initial mount failed, exiting"
    exit 1
fi

# Health monitoring and auto-remount loop
while true; do
    sleep 30
    
    # Check if mount is still healthy
    if ! timeout 10 ls "${MOUNT_POINT}" >/dev/null 2>&1; then
        bashio::log.warning "Mount appears stale, attempting remount..."
        if mount_smbnetfs; then
            bashio::log.info "Remount successful"
        else
            bashio::log.error "Remount failed, will retry in 30 seconds"
        fi
    fi
    
    # Check if smbnetfs process is still running
    if ! pgrep -f smbnetfs >/dev/null; then
        bashio::log.warning "smbnetfs process died, attempting remount..."
        if mount_smbnetfs; then
            bashio::log.info "Process restart successful"
        else
            bashio::log.error "Process restart failed, will retry in 30 seconds"
        fi
    fi
done
